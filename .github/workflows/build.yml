name: build

on: [push, pull_request]

env:
    BUILD_TYPE: Release

jobs:
    debian-bookworm:
        if: true
        runs-on: ubuntu-latest
        container:
            image: debian:bookworm

        steps:
            - uses: actions/checkout@v4

            - name: Add xpam repo
              run: |
                  apt-get update && apt-get install -y curl gnupg git
                  curl -fsSL https://repo.xpam.pl/repository/repokeys/public/debian-bookworm-xpam.asc | tee /etc/apt/keyrings/debian-bookworm-xpam.asc
                  echo "Types: deb
                  URIs: https://repo.xpam.pl/repository/debian-bookworm-xpam/
                  Suites: bookworm
                  Components: main
                  Signed-By: /etc/apt/keyrings/debian-bookworm-xpam.asc" | tee /etc/apt/sources.list.d/xpam.sources > /dev/null

            - name: Install dependencies
              run: |
                apt-get update && apt-get install -y \
                  cmake build-essential libmysqlcppconn-dev libmariadb-dev-compat \
                  libboost-filesystem-dev libboost-system-dev libboost-chrono-dev \
                  libboost-thread-dev libboost-date-time-dev libboost-regex-dev \
                  bncsutil stormlib

            - name: Cmake
              run: cmake -B ./build -DCMAKE_BUILD_TYPE=$BUILD_TYPE

            - name: Build
              run: cmake --build ./build --config Release

    docker-build:
        if: true
        runs-on: ubuntu-latest
        steps:
            - name: Build manager image
              run: docker build --platform linux/amd64 --tag pd-manager --file ./Dockerfile.manager .

            - name: Build slave image
              run: docker build --platform linux/amd64 --tag pd-slave --file ./Dockerfile.slave .

    windows-latest:
        if: true
        runs-on: windows-latest
        strategy:
            matrix:
                deptool: [conan, vcpkg]

        steps:
            - uses: actions/checkout@v4

            - uses: TheMrMilchmann/setup-msvc-dev@v3
              with:
                arch: x64

            - name: Install Conan
              if: ${{ matrix.deptool == 'conan' }}
              uses: turtlebrowser/get-conan@main

            - name: Init Conan
              if: ${{ matrix.deptool == 'conan' }}
              run: conan profile detect

            - name: Cmake conan
              if: ${{ matrix.deptool == 'conan' }}
              run: |
                conan install . -of build_conan -s build_type=Release -o *:shared=True --build=missing
                cmake --preset conan
                cmake --build build_conan --config Release

            - name: Cmake vcpkg
              if: ${{ matrix.deptool == 'vcpkg' }}
              run: |
                cmake --preset vcpkg
                cmake --build build_vcpkg --config Release
